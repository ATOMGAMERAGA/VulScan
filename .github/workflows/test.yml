name: VulScan CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.19, 1.20, 1.21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Build for Linux
      run: |
        GOOS=linux GOARCH=amd64 go build -o vulscan-linux-amd64 .
        
    - name: Build for Windows
      run: |
        GOOS=windows GOARCH=amd64 go build -o vulscan-windows-amd64.exe .
        
    - name: Build for macOS
      run: |
        GOOS=darwin GOARCH=amd64 go build -o vulscan-darwin-amd64 .
        
    - name: Test binary execution
      run: |
        chmod +x vulscan-linux-amd64
        ./vulscan-linux-amd64 --version
        
    - name: Security scan with gosec
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: vulscan-binaries-${{ matrix.go-version }}
        path: |
          vulscan-linux-amd64
          vulscan-windows-amd64.exe
          vulscan-darwin-amd64
          
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build VulScan
      run: go build -o vulscan .
      
    - name: Start test server
      run: |
        python3 -m http.server 8080 &
        sleep 2
        
    - name: Run integration tests
      run: |
        # Test basic functionality
        ./vulscan --version
        
        # Test help command
        ./vulscan -h
        
        # Test scan against local server
        ./vulscan -v http://localhost:8080 || true
        
        # Test JSON output
        ./vulscan -o test-output.json http://localhost:8080 || true
        
        # Verify JSON output exists
        if [ -f "test-output.json" ]; then
          echo "JSON output created successfully"
          cat test-output.json
        else
          echo "JSON output not created"
          exit 1
        fi
        
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t vulscan:test .
      
    - name: Test Docker image
      run: |
        docker run --rm vulscan:test --version
        docker run --rm vulscan:test -h
        
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, integration-test, docker-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build release binaries
      run: |
        # Linux
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o vulscan-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o vulscan-linux-arm64 .
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o vulscan-windows-amd64.exe .
        GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o vulscan-windows-arm64.exe .
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o vulscan-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o vulscan-darwin-arm64 .
        
    - name: Create checksums
      run: |
        sha256sum vulscan-* > checksums.txt
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-binaries
        path: |
          vulscan-*
          checksums.txt