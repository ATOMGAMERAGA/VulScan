name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: ATOMGAMERAGA/VulScan

jobs:
  # Code quality checks (without gosec for now)
  lint-and-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      shell: bash
      run: |
        go mod download
        go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Format check
      shell: bash
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Vet
      run: go vet ./...

    - name: StaticCheck
      run: staticcheck ./...
      continue-on-error: true

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: go mod download

    - name: Check if tests exist
      id: check_tests
      shell: bash
      run: |
        if find . -name "*_test.go" -type f | grep -q .; then
          echo "tests_exist=true" >> $GITHUB_OUTPUT
        else
          echo "tests_exist=false" >> $GITHUB_OUTPUT
          echo "No test files found"
        fi

    - name: Run tests
      if: steps.check_tests.outputs.tests_exist == 'true'
      shell: bash
      run: go test -v -race -coverprofile=coverage.out ./...
      continue-on-error: true

    - name: Generate coverage report
      shell: bash
      run: |
        if [ -f coverage.out ]; then
          go tool cover -html=coverage.out -o coverage.html
        fi

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23' && hashFiles('coverage.out') != ''
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html
        if-no-files-found: ignore

  # Build binaries for multiple platforms
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [lint-and-quality, test]
    strategy:
      matrix:
        include:
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: 386
            ext: .exe
          - os: linux
            arch: amd64
            ext: ''
          - os: linux
            arch: 386
            ext: ''
          - os: linux
            arch: arm64
            ext: ''
          - os: darwin
            arch: amd64
            ext: ''
          - os: darwin
            arch: arm64
            ext: ''
          - os: freebsd
            arch: amd64
            ext: ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${GITHUB_REF#refs/*/}
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${GITHUB_SHA::8}
        
        mkdir -p build
        go build \
          -trimpath \
          -ldflags="-w -s -X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.gitCommit=$GIT_COMMIT" \
          -o build/vulscan-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} \
          main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vulscan-${{ matrix.os }}-${{ matrix.arch }}
        path: build/vulscan-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

  # Build and push Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-quality, test]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/atomgameraga/vulscan
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Dependency update check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for vulnerabilities
      shell: bash
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck -json ./... > govulncheck.json 2>&1 || true
        govulncheck ./... || echo "Vulnerabilities found - check govulncheck.json for details"
      continue-on-error: true

    - name: Upload vulnerability report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: |
          govulncheck.json
        if-no-files-found: ignore
