name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: ATOMGAMERAGA/VulScan

jobs:
  # Code quality and security checks
  lint-and-security:
    name: Lint and Security Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Vet
      run: go vet ./...

    - name: StaticCheck
      run: staticcheck ./...

    - name: Security scan
      run: |
        gosec -fmt sarif -out gosec.sarif -stdout -verbose=text ./...

    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html

  # Build binaries for multiple platforms
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    strategy:
      matrix:
        include:
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: 386
            ext: .exe
          - os: linux
            arch: amd64
            ext: ''
          - os: linux
            arch: 386
            ext: ''
          - os: linux
            arch: arm64
            ext: ''
          - os: darwin
            arch: amd64
            ext: ''
          - os: darwin
            arch: arm64
            ext: ''
          - os: freebsd
            arch: amd64
            ext: ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${GITHUB_REF#refs/*/}
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${GITHUB_SHA::8}
        
        mkdir -p build
        go build \
          -trimpath \
          -ldflags="-w -s -X main.version=$VERSION -X main.buildTime=$BUILD_TIME -X main.gitCommit=$GIT_COMMIT" \
          -o build/vulscan-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }} \
          main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vulscan-${{ matrix.os }}-${{ matrix.arch }}
        path: build/vulscan-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

  # Build and push Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-security, test]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/atomgameraga/vulscan
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests against real targets
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download binary
      uses: actions/download-artifact@v4
      with:
        name: vulscan-linux-amd64
        path: ./

    - name: Make binary executable
      run: chmod +x vulscan-linux-amd64

    - name: Run integration tests
      run: |
        echo "Running integration tests against test targets..."
        ./vulscan-linux-amd64 http://testphp.vulnweb.com/listproducts.php?cat=1 --output integration-test.json --timeout 30
        
        # Verify JSON output
        if [ -f integration-test.json ]; then
          echo "✅ JSON report generated successfully"
          jq '.summary' integration-test.json
        else
          echo "❌ JSON report not generated"
          exit 1
        fi

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          integration-test.json
          *.html

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -count=3 ./... > benchmark.txt
        cat benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  # Release creation
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, integration-test, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release archives
      run: |
        mkdir -p release
        
        for dir in vulscan-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            binary=$(ls vulscan-*)
            if [[ "$binary" == *.exe ]]; then
              zip "../release/${binary%.exe}.zip" "$binary"
            else
              tar -czf "../release/$binary.tar.gz" "$binary"
            fi
            cd ..
          fi
        done
        
        # Generate checksums
        cd release
        sha256sum * > SHA256SUMS
        cd ..

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract changelog for this version
        awk '/^## \['$VERSION'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        
        if [ ! -s release_notes.md ]; then
          echo "🚀 VulScan $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: VulScan ${{ steps.release_notes.outputs.VERSION }}
        body_path: release_notes.md
        files: |
          release/*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true

  # Dependency update check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true  # Don't fail the build for now, just report

    - name: Upload vulnerability report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: |
          govulncheck.json
